get_objects:
  pods:
    kubectl get pods
    kubectl get pods -n <namespace>
    kubectl get pods --all-namespaces
    kubectl get pods | grep <filter string>
    kubectl get pods -o wide
  deployments:
    kubectl get deployments
  services:
    kubectl get services
  nodes:
    kubectl get nodes
  replicationController:
    kubectl get replicationcontroller
  replicaset:
    kubectl get replicaset
  configmaps:
    kubectl get configmaps
    describe:
      kubectl describe configmaps configmap-name
  service account:
    kubectl get serviceaccount
    describe:
      kubectl describe serviceaccount serviceaccount-name
  jobs:
    kubectl get jobs
  cronjob:
    kubectl get cronjobs


delete object:
  kubectl delete object object_name
  force delete all pods:
    kubectl delete pods --all --grace-period=0 --force

get cluster info:
  kubectl cluster-info

create a new pod:
  kubectl run <name> --image=<image_name> --port=<forwarding port>
  new pod with custome args for the container process:
    kubectl run <name> --image=<image_name> -- arg1 arg2 arg3

create a new deployment:
  kubectl create deployment <deployment name> --image=image_name --replicas=replica-count --port=forwarding-port
  set / update the image in a deployment:
    kubectl det image deployment deployment-name container-name=new-image

create element from a file:
  kubectl create -f <filename>

output configs to a file:
  kubectl get pods <name> -o yaml > filename.yaml
  kubectl get pods <name> -o json > filename.json
  get output yaml without creating an object:
    kubectl run redis --image=redis --dry-run=client -o yaml > output.yaml

  example:
    kubectl run redis --image=redis -o yaml > redis_template.yaml

Apply changes to an object:
  kubectl apply -f filename
  kubectl edit object <object_name>
  example:
    kubectl edit pod podname

Scale an object (replicaset/deployment):
  kubectl scale --replicas=3 object object_name
  kubectl scale --replicas=3 -f filename

change namespace for the session:
  kubens new-namespace
  kubectl config set-context $(kubectl config current-context) --namespace=new_ns_name

expose a pod / create a service to expose a pod:
  kubectl expose pod podname --name=service-name --port=forwarding-port


describe pod:
  kubectl describe pod podname

get logs:
  kubectl logs podname 
  multi-container pod:
    kubectl logs pod -c container
  streaming logs:
    kubectl logs -f pod -c container


interactive shell for a pod:
  kubectl exec -it podname -- /bin/bash

create secrets:
  kubectl create secret generic secret-name --from-file=KeyName=filename
  kubectl create secret generic secret-name --from-literal=KeyName="string_value"

get secrets:
  kubectl get secrets
  describe secret:
    kubectl describe secret secret-name

create comfigmap inperatively:
  kubectl create configmap <name> --from-literal=<key>=<value> \ --from-literal=<key>=<value>

create serviceaccount:
  kubectl create serviceaccount serviceaccount-name

taint nodes:
  kubectl taint nodes node-name key=value:taint-effect
  taint-effects:
    - NoSchedule
    - PreferNoSchedule
    - NoExecute
  example:
    kubectl taint nodes node1 app=blue:NoSchedule

  see tains on a node:
    kubectl describe node node-name | grep Taints

  untaint a node:
    kubectl taint nodes node-name taint_name-
    # add a minus (-) to the taint name


label nodes:
  kubectl label nodes node-name label_key:label_value



metric Server:
  clone:
    git clone https://github.com/kodekloudhub/kubernetes-metrics-server.git
  setup:
    kubectl create -f .
  get node level metrics:
    kubectl top nodes
  get pod level metrics:
    kubectl top pods 


rollout:
  status:
    kubectl rollout status <deployment deployment-name> / <deployment/deployment-name>
    get status of a specific revision:
      kubectl rollout status deployment deployment-name --revision=1
  history:
    kubectl rollout history deployment-name
  rollback:
    kubectl rollout undo deployment-name
    rollback to a specific revision:
      kubectl rollout undo deployment-name --to-revision=1